{
	"info": {
		"_postman_id": "9fea782f-09d0-4f08-baa8-2d7d536bf9ab",
		"name": "Lesson",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Lesson1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let user_token = jsonData.token\r",
							"pm.environment.set(\"token\", user_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Sveta",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Lesson2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let salary_check_12 = jsonData.person.u_name[1] * 2.9\r",
							"let salary_12 = jsonData.qa_salary_after_12_months\r",
							"\r",
							"// console.log(salary_check_12)\r",
							"// console.log(salary_12)\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(salary_12).to.eql(salary_check_12);\r",
							"});\r",
							"\r",
							"let req = JSON.parse(request.data)\r",
							"let req_salary = req.salary\r",
							"console.log(req)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sveta\",\r\n    \"age\": 32,\r\n    \"salary\": 2000,\r\n    \"auth_token\": \"{{token}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"pm.test('Body check', () => {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\")\r",
							"})\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.response.text(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW2_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// console.log(jsonData)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name_response = jsonData.name\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(name_response).to.eql('Sveta');\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age_response = jsonData.age\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(age_response).to.eql('32');\r",
							"})\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary_response = jsonData.salary\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(salary_response).to.eql(2000)\r",
							"})\r",
							"\r",
							"// Спарсить request.\r",
							"let reqParse = request.data\r",
							"console.log(reqParse)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_request = reqParse.name\r",
							"pm.test('Request name', function () {\r",
							"    pm.expect(name_response).to.eql(name_request)\r",
							"})\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_request = reqParse.age\r",
							"pm.test('Request age'), function () {\r",
							"    pm.expect(age_response).to.eql(age_request)\r",
							"}\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_request = reqParse.salary\r",
							"pm.test('Request salary'), function () {\r",
							"    pm.expect(salary_response).to.eql(salary_request)\r",
							"}\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"let family_response = jsonData.family\r",
							"console.log(family_response)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary1 = jsonData.family.u_salary_1_5_year \r",
							"let salary2 = reqParse.salary * 4\r",
							"pm.test('Salary'), function () {\r",
							"    pm.expect(salary1).to.eql(salary2)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sveta",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW2_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let reqParse = request.data\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name', function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqParse.name)\r",
							"})\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Age', function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqParse.age)\r",
							"})\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" let salaryString = String(jsonData.salary)\r",
							"pm.test('Salary', function () {\r",
							"    pm.expect(salaryString).to.eql(reqParse.salary)\r",
							"})\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//  Проверить, что у параметра dog есть параметры name.\r",
							" pm.test('Dog_name', function () {\r",
							"     pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							" })\r",
							"//   Проверить, что у параметра dog есть параметры age.\r",
							" pm.test('Dog_age', function () {\r",
							"     pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							" })\r",
							"//   Проверить, что параметр name имеет значение Luky.\r",
							" pm.test('Dog_Luky', function () {\r",
							"     pm.expect(jsonData.family.pets.dog.name).to.deep.include('Luky')\r",
							" })\r",
							"//  Проверить, что параметр age имеет значение 4.\r",
							" pm.test('Dog_4', function () {\r",
							"     pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							" })"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sveta",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Sveta&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW2_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// console.log(jsonData)\r",
							"\r",
							"//  Спарсить request.\r",
							" let req = pm.request.url.query.toObject()\r",
							"//  console.log(req)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Name', function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name)\r",
							"})\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('Age', function () {\r",
							"    pm.expect(String(jsonData.age)).to.eql(req.age)\r",
							"})\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"// Вывести в консоль параметр salary из response.\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"// console.log(jsonData.salary)\r",
							"// console.log(req.salary)\r",
							"// console.log(jsonData.salary[0])\r",
							"// console.log(jsonData.salary[1])\r",
							"// console.log(jsonData.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Salary', function () {\r",
							"    pm.expect(String(jsonData.salary[0])).to.eql(req.salary)\r",
							"})\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Salary2', function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(String(req.salary * 2))\r",
							"})\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('Salary3', function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(String(req.salary * 3))\r",
							"})\r",
							"\r",
							"//  Создать в окружении переменную name\r",
							"let name = req.name\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set('name', name)\r",
							"\r",
							"//  Создать в окружении переменную age\r",
							"let age = req.age\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set('age', age)\r",
							"\r",
							"//  Создать в окружении переменную salary\r",
							"let salary = req.salary\r",
							"//  Передать в окружение переменную salary\r",
							"pm.environment.set('salary', salary)\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary (циклом вывести значения из объекта js\")\r",
							"    // 1st option\r",
							"//     for (let key in jsonData.salary) {\r",
							"//     console.log(key, ':', jsonData.salary[key])\r",
							"// }\r",
							"\r",
							"// 2d option\r",
							"// Object.keys(jsonData.salary).forEach(key => {\r",
							"//     console.log(key, jsonData.salary[key])\r",
							"// })\r",
							"\r",
							"// 3d option\r",
							"// Object.values(jsonData.salary).forEach(value => {\r",
							"//     console.log(value);\r",
							"// })\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Sveta&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW2_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"console.log(jsonData)\r",
							"// Спарсить request.\r",
							"let req = request.data\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('Start_Salary', function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary')\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('Salary_6months', function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('Salary_12months', function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('Salary_18months', function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('Salary_3.5years', function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test('Person', function () {\r",
							"    pm.expect(jsonData).to.have.property('person')\r",
							"})\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Check_start_qa_salary', function () {\r",
							"    pm.expect(String(jsonData.start_qa_salary)).to.eql(req.salary)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Check_qa_salary_after_6_months', () => {\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 2)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('Check_qa_salary_after_12_months', () => {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 2.7)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"// к полю объекта можно обращаться не через точку, а в скобках квадратных ['qa_salary_after_1.5_year']\r",
							"pm.test('Check_qa_salary_after_1.5_year', () => {\r",
							"   pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary * 3.3)\r",
							"})\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('Check_qa_salary_after_3.5_years', () => {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary * 3.8)\r",
							"})\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('Check_1st_element_u_name', () => {\r",
							"    pm.expect(String(jsonData.person.u_name[1])).to.eql(req.salary)\r",
							"})\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('Check_age', () => {\r",
							"    pm.expect(String(jsonData.person.u_age)).to.eql(req.age)\r",
							"})\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('Check_u_salary_5_years', () => {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary * 4.2)\r",
							"})\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"Object.keys(jsonData.person).forEach(key => {\r",
							"    console.log(key, jsonData.person[key])\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}